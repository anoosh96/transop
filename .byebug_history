c
User.create!(name: name, email: auth_provider&.[](:credentials)&.[](:email), password: auth_provider&.[](:credentials)&.[](:password))
User.create!(
   18:         name: name,
   19:         email: auth_provider&.[](:credentials)&.[](:email),
   20:         password: auth_provider&.[](:credentials)&.[](:password)
   21:       )
auth_provider&.[](:credentials)&.[](:password)
auth_provider&.[](:credentials)&.[](:email)
auth_provider
name
c
e
next
JWT.decode(actual_token, nil, false)
next
token
next
c
context[:current_user].id
context[:current_user]
context
c
JWT.decodec
local_token
c
user = context[:current_user]
local_token
User.find_by_id 3
User.find_by 3
context[:current_user].id
context[:current_user]
context
c
context[:current_user]
c
decoded_token
next
c
up
next
token
c
decoded[0]["exp"]
Time.now.to_i > 1659302451
Time.now.to_i
Time.now
time.now
time.now.to_i
decoded[0]["sub"]
decoded[0]
decoded = JWT.decode token[4...token.length], nil, false
JWT.decode token[4...token.length], nil, false
token[4...token.length]
token[3...token.length]
JWT.decode token, nil, false
token
token = request.headers[:authorization]
request.headers[:authorization]
c
token[0]
token
c
request.headers[:authorization]
c
request.headers[:authorization]
c
JWT.decode token, nil, false
token
token = Warden::JWTAuth::UserEncoder.new.call(user, :users, ENV['TRANSPO_JWT_SECRET_KEY'])[0]
Warden::JWTAuth::UserEncoder.new.call(user, :users, ENV['TRANSPO_JWT_SECRET_KEY'])
ENV['TRANSPO_JWT_SECRET_KEY']
ENV['TRANSPO_JWT_SECRET_KEY]
ENV['TRANSPO_JWT_KEY']
token[0]
token
c
token
c
request.headers[:authorization]
request.headers
decoded[0]["expiry_date"]
decoded[0]
decoded
decoded = JWT.decode token, nil, false
JWT.encode
JWT.decode token, nil, false
JWT.decode token nil
JWT.decode token
token
token = "eyJhbGciOiJIUzI1NiJ9.eyJleHBpcnlfZGF0ZSI6InRvZG8iLCJzdWIiOiIzIiwic2NwIjoidXNlcnMiLCJhdWQiOm51bGwsImlhdCI6MTY1OTI5Njc3MCwiZXhwIjoxNjU5MzAwMzcwLCJqdGkiOiI3MTA1MDBkMy1jMjhkLTRiMjItODFhZS05OWFkMTlmMWJjYTUifQ.4FIVGnIYHkAWDwrauqsLG0lq-pMTAyDJvDWOGsEpqe0"
JWT.decode "eyJhbGciOiJIUzI1NiJ9.eyJleHBpcnlfZGF0ZSI6InRvZG8iLCJzdWIiOiIzIiwic2NwIjoidXNlcnMiLCJhdWQiOm51bGwsImlhdCI6MTY1OTI5Njc3MCwiZXhwIjoxNjU5MzAwMzcwLCJqdGkiOiI3MTA1MDBkMy1jMjhkLTRiMjItODFhZS05OWFkMTlmMWJjYTUifQ.4FIVGnIYHkAWDwrauqsLG0lq-pMTAyDJvDWOGsEpqe0
JWT.decode "eyJhbGciOiJIUzI1NiJ9.eyJleHBpcnlfZGF0ZSI6InRvZG8iLCJzdWIiOiIzIiwic2NwIjoidXNlcnMiLCJhdWQiOm51bGwsImlhdCI6MTY1OTI5Njc3MCwiZXhwIjoxNjU5MzAwMzcwLCJqdGkiOiI3MTA1MDBkMy1jMjhkLTRiMjItODFhZS05OWFkMTlmMWJjYTUifQ.4FIVGnIYHkAWDwrauqsLG0lq-pMTAyDJvDWOGsEpqe0" nil false
JWT.decode "eyJhbGciOiJIUzI1NiJ9.eyJleHBpcnlfZGF0ZSI6InRvZG8iLCJzdWIiOiIzIiwic2NwIjoidXNlcnMiLCJhdWQiOm51bGwsImlhdCI6MTY1OTI5Njc3MCwiZXhwIjoxNjU5MzAwMzcwLCJqdGkiOiI3MTA1MDBkMy1jMjhkLTRiMjItODFhZS05OWFkMTlmMWJjYTUifQ.4FIVGnIYHkAWDwrauqsLG0lq-pMTAyDJvDWOGsEpqe0"
token
JWT.decode(\"eyJhbGciOiJIUzI1NiJ9.eyJleHBpcnlfZGF0ZSI6InRvZG8iLCJzdWIiOiIzIiwic2NwIjoidXNlcnMiLCJhdWQiOm51bGwsImlhdCI6MTY1OTI5Njc3MCwiZXhwIjoxNjU5MzAwMzcwLCJqdGkiOiI3MTA1MDBkMy1jMjhkLTRiMjItODFhZS05OWFkMTlmMWJjYTUifQ.4FIVGnIYHkAWDwrauqsLG0lq-pMTAyDJvDWOGsEpqe0")
token
next
JWT.decode(request.headers[:authorization])
JWT
c
request.headers[:authorization]
request.headers.authorization
request.headers
request
session[:token]
session
c
Types::UserType.new()
Types::UserType.new
Types::UserType.methods
Types::UserType
user = UserType(id: 1)
user = UserType{id: 1}
UserType{id: 1}
UserType{}
user: UserType = {}
user: UserType
UserType.new
new UserType
UserType
user.token
user
c
local_token
local_id
context.to_json
context.to_yaml
context.inspect
pp context
context.query
context
c
quit
context
context.query.result
context.query.value
context.query.value\
context.query
context.value
context.query.methods
context.warden
context.query
context.methods
context
self
this
headers
context.headers
context
methods
request
request.headers['Authorization']
c
context[:current_user]
c
context[:current_user]
c
context[:current_user]
c
context[:current_user]
context
